// Generated by IcedCoffeeScript 108.0.11
(function() {
  var StreamDecoder, StreamEncoder, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('keybase-chunk-stream');

  exports.StreamEncoder = StreamEncoder = (function(_super) {
    __extends(StreamEncoder, _super);

    function StreamEncoder(encoder) {
      var f;
      this.encoder = encoder;
      f = (function(_this) {
        return function(x, cb) {
          return cb(null, new Buffer(_this.encoder.encode(x)));
        };
      })(this);
      StreamEncoder.__super__.constructor.call(this, {
        transform_func: f,
        block_size: this.encoder.in_block_len,
        readableObjectMode: false
      });
    }

    return StreamEncoder;

  })(stream.ChunkStream);

  exports.StreamDecoder = StreamDecoder = (function(_super) {
    __extends(StreamDecoder, _super);

    function StreamDecoder(decoder) {
      var f;
      this.decoder = decoder;
      f = (function(_this) {
        return function(x, cb) {
          return cb(null, new Buffer(_this.decoder.decode(x)));
        };
      })(this);
      StreamDecoder.__super__.constructor.call(this, {
        transform_func: f,
        block_size: this.decoder.out_block_len,
        readableObjectMode: false
      });
    }

    return StreamDecoder;

  })(stream.ChunkStream);

}).call(this);
