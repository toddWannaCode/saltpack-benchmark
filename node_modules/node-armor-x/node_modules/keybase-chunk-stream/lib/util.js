// Generated by IcedCoffeeScript 108.0.11
(function() {
  var StreamToBuffer, crypto, iced, make_esc, stream, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  stream = require('stream');

  crypto = require('crypto');

  make_esc = require('iced-error').make_esc;

  exports.stream_random_data = function(strm, len, cb) {
    var amt, buf, esc, expected_results, index, written, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    esc = make_esc(cb, "Error in stream writing");
    written = 0;
    expected_results = [];
    (function(_this) {
      return (function(__iced_k) {
        var _while;
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = __iced_k;
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = _continue;
          if (!(written < len)) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/mpcsh/keybase/node-chunk-stream/src/util.iced",
                funcname: "stream_random_data"
              });
              crypto.randomBytes(1, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return index = arguments[0];
                  };
                })(),
                lineno: 10
              })));
              __iced_deferrals._fulfill();
            })(function() {
              amt = (index[0] + 1) * 16;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/mpcsh/keybase/node-chunk-stream/src/util.iced",
                  funcname: "stream_random_data"
                });
                crypto.randomBytes(amt, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return buf = arguments[0];
                    };
                  })(),
                  lineno: 14
                })));
                __iced_deferrals._fulfill();
              })(function() {
                written += buf.length;
                expected_results.push(buf);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/mpcsh/keybase/node-chunk-stream/src/util.iced",
                    funcname: "stream_random_data"
                  });
                  strm.write(buf, 'utf-8', esc(__iced_deferrals.defer({
                    lineno: 19
                  })));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            });
          }
        };
        _while(__iced_k);
      });
    })(this)((function(_this) {
      return function() {
        return cb(null, Buffer.concat(expected_results));
      };
    })(this));
  };

  exports.StreamToBuffer = StreamToBuffer = (function(_super) {
    __extends(StreamToBuffer, _super);

    function StreamToBuffer(options) {
      this.bufs = [];
      StreamToBuffer.__super__.constructor.call(this, options);
    }

    StreamToBuffer.prototype._write = function(chunk, encoding, cb) {
      this.bufs.push(chunk);
      return cb();
    };

    StreamToBuffer.prototype.getBuffer = function() {
      return Buffer.concat(this.bufs);
    };

    return StreamToBuffer;

  })(stream.Transform);

}).call(this);
