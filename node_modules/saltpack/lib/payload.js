// Generated by IcedCoffeeScript 108.0.11
(function() {
  var compute_authenticator, crypto, iced, make_esc, nonce, step1, util, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  crypto = require('crypto');

  make_esc = require('iced-error').make_esc;

  nonce = require('./nonce');

  util = require('./util');

  compute_authenticator = function(_arg, cb) {
    var authenticator, hash, hmac, key;
    hash = _arg.hash, key = _arg.key;
    try {
      hmac = crypto.createHmac('sha512', key);
      hmac.update(hash);
      authenticator = hmac.digest().slice(0, 32);
    } catch (_error) {
      return cb(new Error("compute_authenticator"), null);
    }
    return cb(null, authenticator);
  };

  step1 = function(_arg, cb) {
    var block_num, crypto_hash, err, header_hash, payload_secretbox, step1_cat, step1_hash;
    header_hash = _arg.header_hash, block_num = _arg.block_num, payload_secretbox = _arg.payload_secretbox;
    try {
      step1_cat = Buffer.concat([header_hash, nonce.nonceForChunkSecretBox(block_num), payload_secretbox]);
      crypto_hash = crypto.createHash('sha512');
      crypto_hash.update(step1_cat);
      step1_hash = crypto_hash.digest();
    } catch (_error) {
      err = _error;
      console.log(err.message);
      return cb(new Error("step1"), null);
    }
    return cb(null, step1_hash);
  };

  exports.generate_encryption_payload_packet = function(_arg, cb) {
    var authenticators, block_num, esc, header_hash, i, mac_keys, payload_encryptor, payload_secretbox, plaintext, step1_hash, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    payload_encryptor = _arg.payload_encryptor, plaintext = _arg.plaintext, block_num = _arg.block_num, header_hash = _arg.header_hash, mac_keys = _arg.mac_keys;
    esc = make_esc(cb, "generate_encryption_payload_packet");
    payload_secretbox = payload_encryptor.secretbox({
      plaintext: plaintext,
      nonce: nonce.nonceForChunkSecretBox(block_num)
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/mpcsh/keybase/node-saltpack/src/payload.iced",
          funcname: "generate_encryption_payload_packet"
        });
        step1({
          header_hash: header_hash,
          block_num: block_num,
          payload_secretbox: payload_secretbox
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return step1_hash = arguments[0];
            };
          })(),
          lineno: 32
        })));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        authenticators = [];
        (function(__iced_k) {
          var _begin, _end, _i, _positive, _results, _step, _while;
          i = 0;
          _begin = 0;
          _end = mac_keys.length;
          if (_end > _begin) {
            _step = 1;
          } else {
            _step = -1;
          }
          _positive = _end > _begin;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                i += _step;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!!((_positive === true && i >= mac_keys.length) || (_positive === false && i <= mac_keys.length))) {
              return _break();
            } else {

              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/mpcsh/keybase/node-saltpack/src/payload.iced",
                  funcname: "generate_encryption_payload_packet"
                });
                compute_authenticator({
                  hash: step1_hash,
                  key: mac_keys[i]
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function(__slot_1, __slot_2) {
                    return function() {
                      return __slot_1[__slot_2] = arguments[0];
                    };
                  })(authenticators, i),
                  lineno: 35
                })));
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        })(function() {
          return cb(null, [authenticators, payload_secretbox]);
        });
      };
    })(this));
  };

  exports.parse_encryption_payload_packet = function(_arg, cb) {
    var block_num, computed_authenticator, esc, header_hash, mac_key, payload, payload_decryptor, payload_list, recipient_index, step1_hash, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    payload_decryptor = _arg.payload_decryptor, payload_list = _arg.payload_list, block_num = _arg.block_num, header_hash = _arg.header_hash, mac_key = _arg.mac_key, recipient_index = _arg.recipient_index;
    esc = make_esc(cb, "parse_encryption_payload_packet");
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/mpcsh/keybase/node-saltpack/src/payload.iced",
          funcname: "parse_encryption_payload_packet"
        });
        step1({
          header_hash: header_hash,
          block_num: block_num,
          payload_secretbox: payload_list[1]
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return step1_hash = arguments[0];
            };
          })(),
          lineno: 41
        })));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/mpcsh/keybase/node-saltpack/src/payload.iced",
            funcname: "parse_encryption_payload_packet"
          });
          compute_authenticator({
            hash: step1_hash,
            key: mac_key
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return computed_authenticator = arguments[0];
              };
            })(),
            lineno: 42
          })));
          __iced_deferrals._fulfill();
        })(function() {
          if (!util.bufeq_secure(computed_authenticator, payload_list[0][recipient_index])) {
            return cb(new Error('Integrity check failed!'), null);
          }
          payload = payload_decryptor.secretbox_open({
            ciphertext: payload_list[1],
            nonce: nonce.nonceForChunkSecretBox(block_num)
          });
          return cb(null, payload);
        });
      };
    })(this));
  };

}).call(this);
