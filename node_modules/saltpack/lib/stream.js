// Generated by IcedCoffeeScript 108.0.11
(function() {
  var DecryptStream, EncryptStream, EventEmitter, NaClDecryptStream, NaClEncryptStream, SALTPACK_BLOCK_LEN, StreamWrapper, armor, format, header, iced, make_esc, msgpack, nacl, nonce, noop, payload, stream, __iced_k, __iced_k_noop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  EventEmitter = require('events');

  stream = require('keybase-chunk-stream');

  nacl = require('keybase-nacl');

  armor = require('node-armor-x');

  msgpack = require('keybase-msgpack-lite');

  make_esc = require('iced-error').make_esc;

  payload = require('./payload');

  header = require('./header');

  nonce = require('./nonce');

  format = require('./format');

  SALTPACK_BLOCK_LEN = Math.pow(1024, 2);

  noop = function() {};

  NaClEncryptStream = (function(_super) {
    __extends(NaClEncryptStream, _super);

    NaClEncryptStream.prototype._write_header = function(cb) {
      var args, esc, header_hash, header_intermediate, mac_keys, payload_key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "NaClEncryptStream::_write_header");
      args = {
        encryptor: this._encryptor,
        recipients: this._recipients,
        anonymized_recipients: this._anonymized_recipients
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
            funcname: "NaClEncryptStream._write_header"
          });
          header.generate_encryption_header_packet(args, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                header_intermediate = arguments[0].header_intermediate;
                header_hash = arguments[0].header_hash;
                mac_keys = arguments[0].mac_keys;
                return payload_key = arguments[0].payload_key;
              };
            })(),
            lineno: 24
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._header_hash = header_hash;
          _this._mac_keys = mac_keys;
          if (_this._encryptor == null) {
            _this._encryptor = nacl.alloc({
              force_js: false
            });
          }
          _this._encryptor.secretKey = payload_key;
          _this.push(header_intermediate);
          _this._header_written = true;
          return cb(null);
        };
      })(this));
    };

    NaClEncryptStream.prototype._encrypt = function(chunk, cb) {
      var args, esc, payload_list, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "NaClEncryptStream::_encrypt");
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._header_written) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
                funcname: "NaClEncryptStream._encrypt"
              });
              _this._write_header(esc(__iced_deferrals.defer({
                lineno: 39
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          args = {
            payload_encryptor: _this._encryptor,
            plaintext: chunk,
            block_num: _this._block_num,
            header_hash: _this._header_hash,
            mac_keys: _this._mac_keys
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
              funcname: "NaClEncryptStream._encrypt"
            });
            payload.generate_encryption_payload_packet(args, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return payload_list = arguments[0];
                };
              })(),
              lineno: 48
            })));
            __iced_deferrals._fulfill();
          })(function() {
            ++_this._block_num;
            return cb(null, payload_list);
          });
        };
      })(this));
    };

    NaClEncryptStream.prototype.flush_append = function(cb) {
      var esc, payload_list, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "NaClEncryptStream::_flush_append");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
            funcname: "NaClEncryptStream.flush_append"
          });
          _this._encrypt(new Buffer(''), esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return payload_list = arguments[0];
              };
            })(),
            lineno: 55
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, payload_list);
        };
      })(this));
    };

    function NaClEncryptStream(_encryptor, _recipients, _anonymized_recipients) {
      this._encryptor = _encryptor;
      this._recipients = _recipients;
      this._anonymized_recipients = _anonymized_recipients;
      this._encrypt = __bind(this._encrypt, this);
      this._write_header = __bind(this._write_header, this);
      this._header_written = false;
      this._block_num = 0;
      this._mac_keys = null;
      this._header_hash = null;
      NaClEncryptStream.__super__.constructor.call(this, {
        transform_func: this._encrypt,
        block_size: SALTPACK_BLOCK_LEN,
        readableObjectMode: true
      });
    }

    return NaClEncryptStream;

  })(stream.ChunkStream);

  NaClDecryptStream = (function(_super) {
    __extends(NaClDecryptStream, _super);

    NaClDecryptStream.prototype._decrypt = function(chunk, cb) {
      var args, esc, payload_text, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "NaClDecryptStream::_decrypt");
      args = {
        payload_decryptor: this._decryptor,
        payload_list: chunk,
        block_num: this._block_num,
        header_hash: this._header_hash,
        mac_key: this._mac_key,
        recipient_index: this._recipient_index
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
            funcname: "NaClDecryptStream._decrypt"
          });
          payload.parse_encryption_payload_packet(args, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return payload_text = arguments[0];
              };
            })(),
            lineno: 79
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ++_this._block_num;
          return cb(null, payload_text);
        };
      })(this));
    };

    NaClDecryptStream.prototype._transform = function(chunk, encoding, cb) {
      var esc, header_hash, mac_key, out, payload_key, recipient_index, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "NaClDecryptStream::_transform");
      if (chunk.length === 0) {
        return cb(null, null);
      }
      if (!this._header_read) {
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
              funcname: "NaClDecryptStream._transform"
            });
            header.parse_encryption_header_packet({
              decryptor: _this._decryptor,
              header_intermediate: chunk
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  header_hash = arguments[0].header_hash;
                  payload_key = arguments[0].payload_key;
                  mac_key = arguments[0].mac_key;
                  return recipient_index = arguments[0].recipient_index;
                };
              })(),
              lineno: 91
            })));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this._header_hash = header_hash;
            _this._decryptor.secretKey = payload_key;
            _this._mac_key = mac_key;
            _this._recipient_index = recipient_index;
            _this._header_read = true;
            return cb(null, null);
            return __iced_k();
          };
        })(this));
      } else {
        if (this._found_empty_ending_packet) {
          return cb(new Error("Message was reordered"), null);
        }
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/mpcsh/keybase/node-saltpack/src/stream.iced",
              funcname: "NaClDecryptStream._transform"
            });
            _this._decrypt(chunk, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 102
            })));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            if (out.length === 0) {
              _this._found_empty_ending_packet = true;
            }
            return cb(null, out);
            return __iced_k();
          };
        })(this));
      }
    };

    NaClDecryptStream.prototype._flush = function(cb) {
      if (!this._found_empty_ending_packet) {
        return cb(new Error("Message was truncated"), null);
      }
      return cb(null, null);
    };

    function NaClDecryptStream(_decryptor) {
      this._decryptor = _decryptor;
      this._decrypt = __bind(this._decrypt, this);
      this._header_read = false;
      this._header_hash = null;
      this._found_empty_ending_packet = false;
      this._mac_key = null;
      this._recipient_index = -1;
      this._block_num = 0;
      NaClDecryptStream.__super__.constructor.call(this, {
        writableObjectMode: true,
        readableObjectMode: false
      });
    }

    return NaClDecryptStream;

  })(require('stream').Transform);

  StreamWrapper = (function(_super) {
    __extends(StreamWrapper, _super);

    function StreamWrapper(streams) {
      var i, len, _i, _j, _len, _ref;
      len = streams.length;
      for (i = _i = 0, _ref = len - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        streams[i].pipe(streams[i + 1]);
      }
      this.first_stream = streams[0];
      this.last_stream = streams[len - 1];
      for (_j = 0, _len = streams.length; _j < _len; _j++) {
        stream = streams[_j];
        stream.on('error', (function(_this) {
          return function(err) {
            return _this.emit('error', err);
          };
        })(this));
      }
      this.first_stream.on('drain', (function(_this) {
        return function() {
          return _this.emit('drain');
        };
      })(this));
      this.first_stream.on('pipe', (function(_this) {
        return function(src) {
          return _this.emit('pipe', src);
        };
      })(this));
      this.first_stream.on('unpipe', (function(_this) {
        return function(src) {
          return _this.emit('unpipe', src);
        };
      })(this));
      this.last_stream.on('close', (function(_this) {
        return function() {
          return _this.emit('close');
        };
      })(this));
      this.last_stream.on('data', (function(_this) {
        return function(chunk) {
          return _this.emit('data', chunk);
        };
      })(this));
      this.last_stream.on('end', (function(_this) {
        return function() {
          return _this.emit('end');
        };
      })(this));
      this.last_stream.on('finish', (function(_this) {
        return function() {
          return _this.emit('finish');
        };
      })(this));
      this.last_stream.on('readable', (function(_this) {
        return function() {
          return _this.emit('readable');
        };
      })(this));
    }

    StreamWrapper.prototype.write = function(chunk) {
      return this.first_stream.write(chunk);
    };

    StreamWrapper.prototype.pipe = function(dest) {
      this.last_stream.pipe(dest);
      return dest;
    };

    StreamWrapper.prototype.end = function() {
      return this.first_stream.end();
    };

    return StreamWrapper;

  })(EventEmitter);

  exports.EncryptStream = EncryptStream = (function(_super) {
    __extends(EncryptStream, _super);

    function EncryptStream(_arg) {
      var anonymized_recipients, do_armoring, encryptor, internals, recipients;
      encryptor = _arg.encryptor, do_armoring = _arg.do_armoring, recipients = _arg.recipients, anonymized_recipients = _arg.anonymized_recipients;
      internals = [];
      internals.push(new NaClEncryptStream(encryptor, recipients, anonymized_recipients));
      internals.push(msgpack.createEncodeStream());
      if (do_armoring) {
        internals.push(new armor.stream.StreamEncoder(armor.encoding.b62.encoding));
        internals.push(new format.FormatStream({}));
      }
      EncryptStream.__super__.constructor.call(this, internals);
    }

    return EncryptStream;

  })(StreamWrapper);

  exports.DecryptStream = DecryptStream = (function(_super) {
    __extends(DecryptStream, _super);

    function DecryptStream(_arg) {
      var decryptor, do_armoring, internals;
      decryptor = _arg.decryptor, do_armoring = _arg.do_armoring;
      internals = [];
      internals.push(msgpack.createDecodeStream());
      internals.push(new NaClDecryptStream(decryptor));
      if (do_armoring) {
        internals.unshift(new armor.stream.StreamDecoder(armor.encoding.b62.encoding));
        internals.unshift(new format.DeformatStream({}));
      }
      DecryptStream.__super__.constructor.call(this, internals);
    }

    return DecryptStream;

  })(StreamWrapper);

}).call(this);
